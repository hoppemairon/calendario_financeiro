def mostrar_interface_compartilhamento(supabase_client: SupabaseClient):
    """Interface para gerenciar licen√ßas de acesso entre usu√°rios."""
    st.header("üë• Gerenciamento de Licen√ßas de Usu√°rios")
    
    # Mostrar status de admin
    st.success("üîß **ADMIN GERAL** - Gerencie qual usu√°rio pode ver **TODAS as movimenta√ß√µes** de outros usu√°rios")
    
    # Buscar dados necess√°rios
    usuarios_df = supabase_client.listar_todos_usuarios()
    
    # Estat√≠sticas gerais do sistema
    st.subheader("üìä Estat√≠sticas do Sistema")
    col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
    
    with col_stats1:
        st.metric("üë• Total de Usu√°rios", len(usuarios_df))
    
    with col_stats2:
        df_todas_a_pagar = supabase_client.buscar_todas_contas_a_pagar()
        st.metric("üìã Total Contas a Pagar", len(df_todas_a_pagar))
    
    with col_stats3:
        df_todas_pagas = supabase_client.buscar_todas_contas_pagas()
        st.metric("‚úÖ Total Contas Pagas", len(df_todas_pagas))
    
    with col_stats4:
        empresas = supabase_client.listar_todas_empresas()
        st.metric("üè¢ Total de Empresas", len(empresas))
    
    st.divider()
    
    # Interface para conceder licen√ßa
    st.subheader("ü§ù Conceder Licen√ßa de Acesso Total")
    
    # Explica√ß√£o clara
    st.info("""
    üí° **Como funciona a licen√ßa:**
    - Selecione o **usu√°rio que vai ganhar acesso** 
    - Selecione o **usu√°rio propriet√°rio dos dados**
    - O primeiro usu√°rio poder√° ver **TODAS as movimenta√ß√µes (contas a pagar e pagas)** do segundo usu√°rio
    """)
    
    if not usuarios_df.empty:
        with st.form("conceder_licenca"):
            col1, col2, col3 = st.columns([4, 4, 2])
            
            with col1:
                # Usu√°rio que VAI ACESSAR
                usuarios_options = [""] + [f"{row['nome']} ({row['email']})" for _, row in usuarios_df.iterrows()]
                usuario_acessante = st.selectbox(
                    "üë§ Usu√°rio que vai ganhar acesso:", 
                    usuarios_options, 
                    help="Este usu√°rio poder√° ver os dados de outro usu√°rio"
                )
            
            with col2:
                # Usu√°rio PROPRIET√ÅRIO DOS DADOS  
                usuario_proprietario = st.selectbox(
                    "üóÇÔ∏è Usu√°rio propriet√°rio dos dados:", 
                    usuarios_options, 
                    help="Usu√°rio cujas movimenta√ß√µes ser√£o visualizadas"
                )
            
            with col3:
                # N√≠vel de acesso
                nivel_acesso = st.selectbox("üîê N√≠vel:", ["viewer", "editor"], index=0)
            
            conceder_button = st.form_submit_button("ü§ù Conceder Licen√ßa", type="primary", use_container_width=True)
            
            if conceder_button:
                if usuario_acessante and usuario_proprietario and usuario_acessante != usuario_proprietario:
                    # Extrair dados dos usu√°rios
                    email_acessante = usuario_acessante.split("(")[1].replace(")", "")
                    email_proprietario = usuario_proprietario.split("(")[1].replace(")", "")
                    
                    usuario_acessante_info = usuarios_df[usuarios_df['email'] == email_acessante]
                    usuario_proprietario_info = usuarios_df[usuarios_df['email'] == email_proprietario]
                    
                    if not usuario_acessante_info.empty and not usuario_proprietario_info.empty:
                        # Criar licen√ßa usando session_state tempor√°rio
                        if 'licencas_usuarios' not in st.session_state:
                            st.session_state['licencas_usuarios'] = []
                        
                        licenca = {
                            "usuario_acessante_id": usuario_acessante_info.iloc[0]['id'],
                            "usuario_acessante_nome": usuario_acessante_info.iloc[0]['nome'],
                            "usuario_acessante_email": email_acessante,
                            "usuario_proprietario_id": usuario_proprietario_info.iloc[0]['id'],
                            "usuario_proprietario_nome": usuario_proprietario_info.iloc[0]['nome'],
                            "usuario_proprietario_email": email_proprietario,
                            "nivel_acesso": nivel_acesso,
                            "concedido_por": supabase_client.user_id,
                            "ativo": True,
                            "data_concessao": datetime.now().isoformat()
                        }
                        
                        # Remover licen√ßa existente se houver
                        st.session_state['licencas_usuarios'] = [
                            l for l in st.session_state['licencas_usuarios'] 
                            if not (l['usuario_acessante_id'] == licenca['usuario_acessante_id'] and 
                                   l['usuario_proprietario_id'] == licenca['usuario_proprietario_id'])
                        ]
                        
                        # Adicionar nova licen√ßa
                        st.session_state['licencas_usuarios'].append(licenca)
                        
                        st.success(f"""
                        ‚úÖ **Licen√ßa concedida com sucesso!**
                        
                        **{usuario_acessante_info.iloc[0]['nome']}** agora pode visualizar **TODAS as movimenta√ß√µes** de **{usuario_proprietario_info.iloc[0]['nome']}**
                        """)
                        st.rerun()
                    else:
                        st.error("‚ùå Usu√°rios n√£o encontrados")
                elif usuario_acessante == usuario_proprietario:
                    st.error("‚ùå Um usu√°rio n√£o pode ser propriet√°rio e acessante ao mesmo tempo")
                else:
                    st.error("‚ùå Selecione ambos os usu√°rios")
    
    st.divider()
    
    # Mostrar licen√ßas existentes
    st.subheader("üìã Licen√ßas Ativas no Sistema")
    
    licencas_temp = st.session_state.get('licencas_usuarios', [])
    if licencas_temp:
        licencas_ativas = [l for l in licencas_temp if l['ativo']]
        
        if licencas_ativas:
            for idx, licenca in enumerate(licencas_ativas):
                with st.container():
                    col_info, col_action = st.columns([5, 1])
                    
                    with col_info:
                        st.write(f"üë§ **{licenca['usuario_acessante_nome']}** ‚û°Ô∏è üóÇÔ∏è **{licenca['usuario_proprietario_nome']}**")
                        st.caption(f"üìß {licenca['usuario_acessante_email']} pode ver **TODAS as movimenta√ß√µes** de {licenca['usuario_proprietario_email']}")
                        st.caption(f"üîê N√≠vel: {licenca['nivel_acesso']} | üìÖ Desde: {licenca['data_concessao'][:10]}")
                    
                    with col_action:
                        if st.button("üóëÔ∏è", key=f"revogar_licenca_{idx}", help="Revogar esta licen√ßa"):
                            # Encontrar e desativar licen√ßa
                            for i, l in enumerate(st.session_state['licencas_usuarios']):
                                if (l['usuario_acessante_id'] == licenca['usuario_acessante_id'] and 
                                    l['usuario_proprietario_id'] == licenca['usuario_proprietario_id']):
                                    st.session_state['licencas_usuarios'][i]['ativo'] = False
                                    break
                            
                            st.success(f"üóëÔ∏è Licen√ßa revogada! **{licenca['usuario_acessante_nome']}** n√£o pode mais acessar dados de **{licenca['usuario_proprietario_nome']}**")
                            st.rerun()
                    
                    st.divider()
        else:
            st.info("üìù Todas as licen√ßas foram revogadas")
    else:
        st.info("üìù Nenhuma licen√ßa configurada ainda")
    
    # Se√ß√£o de usu√°rios dispon√≠veis com estat√≠sticas
    st.divider()
    st.subheader("üë• Usu√°rios e suas Movimenta√ß√µes")
    
    if not usuarios_df.empty:
        # Calcular estat√≠sticas para cada usu√°rio
        usuarios_com_stats = []
        
        with st.spinner("üìä Calculando estat√≠sticas dos usu√°rios..."):
            for _, user in usuarios_df.iterrows():
                try:
                    # Buscar quantos registros cada usu√°rio tem
                    response_a_pagar = supabase_client.supabase.table("contas_a_pagar").select("id").eq("usuario_id", user['id']).execute()
                    response_pagas = supabase_client.supabase.table("contas_pagas").select("id").eq("usuario_id", user['id']).execute()
                    
                    user_a_pagar = len(response_a_pagar.data or [])
                    user_pagas = len(response_pagas.data or [])
                    
                    usuarios_com_stats.append({
                        'Nome': user['nome'],
                        'Email': user['email'],
                        'Empresa Padr√£o': user.get('empresa_padrao', 'N/A'),
                        'Contas a Pagar': user_a_pagar,
                        'Contas Pagas': user_pagas,
                        'Total Movimenta√ß√µes': user_a_pagar + user_pagas
                    })
                except Exception as e:
                    print(f"Erro ao buscar dados do usu√°rio {user['nome']}: {e}")
        
        if usuarios_com_stats:
            df_stats = pd.DataFrame(usuarios_com_stats)
            # Ordenar por total de movimenta√ß√µes
            df_stats = df_stats.sort_values('Total Movimenta√ß√µes', ascending=False)
            
            st.dataframe(
                df_stats, 
                use_container_width=True,
                hide_index=True,
                column_config={
                    'Total Movimenta√ß√µes': st.column_config.NumberColumn(
                        'Total Movimenta√ß√µes',
                        help="Soma de contas a pagar + contas pagas",
                        format="%d"
                    )
                }
            )
        else:
            st.warning("‚ö†Ô∏è Erro ao calcular estat√≠sticas dos usu√°rios")
    else:
        st.info("‚ùå Nenhum usu√°rio encontrado")
